version: '3.8'

networks:
  meta-network:
    name: meta-network
    driver: bridge

services:
  common-lib:
    build:
      context: .
      dockerfile: common-lib/Dockerfile
    container_name: common-lib
    networks:
      - meta-network
    volumes:
      - common-maven:/root/.m2
    command: ["mvn", "clean", "install", "-DskipTests"]

  # User Server 1
  user-server1:
    build:
      context: .
      dockerfile: user-server/Dockerfile
    container_name: user-server1
    # cpus: 4.0         # <--- CPU 4개 할당
    # mem_limit: 8g     # <--- 메모리 8GB 할당
    # ulimits:          # <--- 추가로 이 설정도 필수!
    #   nofile:
    #     soft: 100000
    #     hard: 100000
    depends_on:
      common-lib:
        condition: service_started
      mysql:
        condition: service_healthy
    ports :
      - "1113:1113"
    networks:
      - meta-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - common-maven:/root/.m2
      # - ./user-server/src/main/webapp:/usr/local/tomcat/webapps/ROOT


  # user-server5:
  #   build:
  #     context: .
  #     dockerfile: user-server/Dockerfile
  #   container_name: user-server5
  #   # cpus: 4.0         # <--- CPU 4개 할당
  #   # mem_limit: 8g     # <--- 메모리 8GB 할당
  #   # ulimits:          # <--- 추가로 이 설정도 필수!
  #   #   nofile:
  #   #     soft: 100000
  #   #     hard: 100000
  #   depends_on:
  #     - common-lib
  #   ports :
  #     - "1115:1113"
  #   networks:
  #     - meta-network
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   volumes:
  #     - common-maven:/root/.m2
  #     # - ./user-server/src/main/webapp:/usr/local/tomcat/webapps/ROOT

  # User Server6
  # user-server6:
  #   build:
  #     context: .
  #     dockerfile: user-server/Dockerfile
  #   container_name: user-server6
  #   # cpus: 4.0         # <--- CPU 4개 할당
  #   # mem_limit: 8g     # <--- 메모리 8GB 할당
  #   # ulimits:          # <--- 추가로 이 설정도 필수!
  #   #   nofile:
  #   #     soft: 100000
  #   #     hard: 100000
  #   depends_on:
  #     - common-lib
  #   ports :
  #     - "1116:1113"
  #   networks:
  #     - meta-network
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   volumes:
  #     - common-maven:/root/.m2
  #     # - ./user-server/src/main/webapp:/usr/local/tomcat/webapps/ROOT

  # User Server7
  # user-server7:
  #   build:
  #     context: .
  #     dockerfile: user-server/Dockerfile
  #   container_name: user-server7
  #   # cpus: 4.0         # <--- CPU 4개 할당
  #   # mem_limit: 8g     # <--- 메모리 8GB 할당
  #   # ulimits:          # <--- 추가로 이 설정도 필수!
  #   #   nofile:
  #   #     soft: 100000
  #   #     hard: 100000
  #   depends_on:
  #     - common-lib
  #   ports :
  #     - "1117:1113"
  #   networks:
  #     - meta-network
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   volumes:
  #     - common-maven:/root/.m2
  #     # - ./user-server/src/main/webapp:/usr/local/tomcat/webapps/ROOT

  

  # # Notification Server
  # notification-server:
  #   build:
  #     context: .
  #     dockerfile: notification-server/Dockerfile
  #   container_name: notification-server
  #   depends_on:
  #     - discovery-server
  #     - config-server
  #     - common-lib
  #     - kafka
  #   ports:
  #     - "8181:8181"
  #     - "5005:5005"
  #   networks:
  #     - msa-network
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #     - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
  #     - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
  #   volumes:
  #     - common-maven:/root/.m2

  # # Notification Worker Server
  # notification-worker-server:
  #   build:
  #     context: .
  #     dockerfile: notification-worker-server/Dockerfile
  #   container_name: notification-worker-server
  #   depends_on:
  #     - discovery-server
  #     - config-server
  #     - common-lib
  #     - kafka
  #   ports:
  #     - "8281:8081"
  #   restart: always
  #   networks:
  #     - msa-network
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #     - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
  #     - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
  #   volumes:
  #     - common-maven:/root/.m2


  # Nginx
  nginx:
    image: nginx:latest
    container_name: nginx-lg
    volumes:
      - ./nginx/config/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - user-server1
    networks:
      - meta-network

  # Kafka를 위한 Zookeeper
  # zookeeper:
  #   image: bitnami/zookeeper:latest
  #   container_name: zookeeper
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #   networks:
  #     - meta-network

  # # Kafka
  # kafka:
  #   image: bitnami/kafka:latest
  #   container_name: kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #   - KAFKA_BROKER_ID=1
  #   - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #   - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_DOCKER://:29092
  #   - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_DOCKER://kafka:29092
  #   - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_DOCKER:PLAINTEXT
  #   - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
  #   networks:
  #     - meta-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "5131"
      MYSQL_USER: "sjin"
      MYSQL_PASSWORD: "5131"
      MYSQL_ROOT_HOST: "%"
    ports:
      - "3307:3306"
    networks:
      - meta-network
    volumes:
      - ./database/init-scripts/init-mysql.sql:/docker-entrypoint-initdb.d/init-mysql.sql
      - ./database/init-scripts/mock-data.sql:/docker-entrypoint-initdb.d/mock-data.sql
      # - ./database/config/my.cnf:/etc/mysql/my.cnf:ro
      # - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - meta-network
    volumes:
      - ./database/config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.1.3
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - ELASTIC_USERNAME=elastic
  #     - ELASTIC_PASSWORD=changeme
  #   ports:
  #     - "9200:9200"
  #   networks:
  #     - meta-network
  #   volumes:
  #     - ./database/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

volumes:
  common-maven:
